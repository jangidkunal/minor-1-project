#include <stdio.h>

// this function  draw the Tic Tac Toe board
void drawBoard(char B[3][3]) {
    printf("\n\t\t\t\t\t\t\t %c | %c | %c \n", B[0][0], B[0][1], B[0][2]);
    printf("\t\t\t\t\t\t\t---|---|---\n");
    printf("\t\t\t\t\t\t\t %c | %c | %c \n", B[1][0], B[1][1], B[1][2]);
    printf("\t\t\t\t\t\t\t---|---|---\n");
    printf("\t\t\t\t\t\t\t %c | %c | %c \n\n", B[2][0], B[2][1], B[2][2]);
}

// this function will check the move is valid
int isMoveValid(char B[3][3], int row, int col) {
    if (row < 0 || row > 2 || col < 0 || col > 2) {
        return 0;
    }
    if (B[row][col] == ' ') {
        return 1;
    }
    return 0;
}

// Function to check if the game is over
int gameSituation(char B[3][3]) {

    // this will Check rows and columns that all entries are same or not
    for (int i = 0; i < 3; i++) {
        if (B[i][0] == B[i][1] && B[i][1] == B[i][2] && B[i][0] != ' ') {
            return 1;
        }
        if (B[0][i] == B[1][i] && B[1][i] == B[2][i] && B[0][i] != ' ') {
            return 1;
        }
    }
        //this will  Check diagonals the all elements are same or not
    if ((B[0][0] == B[1][1] && B[1][1] == B[2][2] && B[0][0] != ' ') ||
        (B[0][2] == B[1][1] && B[1][1] == B[2][0] && B[0][2] != ' ')) {
        return 1;
    }
    // it will Check for draw by checking all the elements of array by checking element is empty or  not
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (B[i][j] == ' ') {
                return 0;
            }
        }
    }
    return -1; //draw
}
// this function will check that computer can win in this move
int canWin(char B[3][3], int row, int col, char player) {

        // this will Check near by element in row to the computer move
    if (B[row][(col + 1) % 3] == player && B[row][(col + 2) % 3] == player) {
        return 1;
    }

    // this will Check near by element in colum to the computer move
    if (B[(row + 1) % 3][col] == player && B[(row + 2) % 3][col] == player) {
        return 1;
    }

    // this will Check near by element in diagonal to the computer move
    if (row == col && B[(row + 1) % 3][(col + 1) % 3] == player && B[(row + 2) % 3][(col + 2) % 3] == player) {
        return 1;
    }

    if (row + col == 2 && B[(row + 1) % 3][(col + 2) % 3] == player && B[(row + 2) % 3][(col + 1) % 3] == player) {
        return 1;
    }
    return 0;
}
    // if computer canot win in this move then try to block opponent move in which player can win in the next move
    // Check row
int canBlock(char B[3][3], int row, int col, char player ){
     char opponent;
     opponent = player;

    if (B[row][(col + 1) % 3] == opponent && B[row][(col+2) % 3] == opponent) {
        return 1;
    }
    // Check column
    if (B[(row + 1) % 3][col] == opponent && B[(row+2) % 3][col] == opponent) {
        return 1;
    }
    // Check diagonals
    if (row == col && B[(row + 1) % 3][(col +1) % 3] == opponent && B[(row+ 2) % 3][(col + 2) % 3] == opponent) {
        return 1;
    }
    if (row + col == 2 && B[(row+ 1) % 3][(col + 2) % 3] == opponent && B[(row +2) % 3][(col + 1) % 3] == opponent) {
        return 1;
    }
    return 0;
}

// Function to get the best move for the computer (single player mode)
void getComputerMove(char B[3][3], int *row, int *col) {
    // in this code computer try to win
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (B[i][j] == ' ') {
                if (canWin(B, i, j, 'O')) {
                    *row = i;
                    *col = j;
                    return;
                }
            }
        }
    }
    // in this computer block player from winning
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (B[i][j] == ' ') {
                if (canBlock(B, i, j, 'X')) {
                    *row = i;
                    *col = j;
                    return;
                }
            }
        }
    }
    // this is for to choose the empty shell
    if(B[1][1]==' '){
        *row = 1;
        *col = 1;
        return;
    }
    if(B[0][0]==B[2][2] && B[1][1]=='O'){
        *row = 0;
        *col = 1;
        return;
    }
    if(B[2][0]==B[0][2] && B[1][1]=='O'){
        *row = 0;
        *col = 1;
        return;
    }
     if(B[2][0]==' '){
        *row = 2;
        *col = 0;
        return;
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++){
            if (B[i][j] == ' ') {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void makeMove(char B[3][3], int row, int col, char player) {
    B[row][col] = player;
}
int main() {
    char board[3][3] = {{' ', ' ', ' '},{' ', ' ', ' '},{' ', ' ', ' '}};
    int row, col;
    int gameOver = 0;
    int noOfPlayer;
    printf("\t\t\t\t\t\tWelcome To The Game.\n");
    printf("\t\t\t\t\t\t    |TIC TAC TOE|\n\n");

    printf("Select mode:\n");
    printf("\t\t\tSingle Player(1)\t\t\t\t\tDouble Player(2)\n\n");
    //printf(" Double Player(2)\n");
    printf("\t\t\t\t\tEnter the mode you want to play(1 or 2): ");
    scanf("%d", &noOfPlayer);

    int playingPlayer = 1;
    while (!gameOver) {
        drawBoard(board);

        if (noOfPlayer == 1 && playingPlayer == 2) {
            printf("Computer's move:-\n");
            getComputerMove(board, &row, &col);
        } else {
            printf("Player %d's turn.\n", playingPlayer);
            printf("Enter row (0-2): ");
            scanf("%d", &row);
            printf("Enter column(0-2): ");
            scanf("%d", &col);
        }
        if (isMoveValid(board, row, col)) {
                char player;
        if(playingPlayer==1){
            player='X';
        }
        else{
            player='O';
        }
            makeMove(board, row, col, player);

            int output = gameSituation(board); // this function will tell match win or draw by players
            if (output == 1) {
                drawBoard(board);
                if (noOfPlayer == 1 && playingPlayer == 2){
                    printf("\t\t\t\t\t\t\t\t\t\t|Computer wins!|\n");
                    printf("\t\t\t\t\t\t\t\tBetter Luck Next Time.");
                }
                else{
                    printf("\t\t\t\t\t\t\t\t\t\t\tPlayer %d wins!\n", playingPlayer);
                }
                gameOver = 1;
            } else if (output == -1) {
                drawBoard(board);
                printf("\t\t\t\t\t\t\t\t\t\tMatch Draw!\n");
                gameOver = 1;
            } else {
                if(playingPlayer==1){
                    playingPlayer=2;
                }
                else{
                    playingPlayer=1;
                }
            }
        }
        else {
            printf("Invalid move. Try again.\n");
        }
    }


    return 0;
}
